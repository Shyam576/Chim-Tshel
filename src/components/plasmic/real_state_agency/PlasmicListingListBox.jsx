// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cqk25K8CLoCEb3zRi62xhx
// Component: 71q-FmEDiu-m
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: cqk25K8CLoCEb3zRi62xhx/projectcss
import sty from "./PlasmicListingListBox.module.css"; // plasmic-import: 71q-FmEDiu-m/css
import _14655891761535698998SvgIcon from "./icons/PlasmicIcon___14655891761535698998Svg"; // plasmic-import: YBAm9F_DuZLz/icon
import house13533891280JpgQy9Zh9Ut4YJi from "./images/house13533891280Jpg.jpg"; // plasmic-import: qy9zh9UT4yJi/picture

createPlasmicElementProxy;

export const PlasmicListingListBox__VariantProps = new Array();

export const PlasmicListingListBox__ArgProps = new Array("children", "slot");

const $$ = {};

function PlasmicListingListBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      platform={"react"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__htSt)}>
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__vttFx)}
              displayHeight={"250px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: house13533891280JpgQy9Zh9Ut4YJi,
                fullWidth: 1280,
                fullHeight: 853,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__surNw)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xhQaw
                )}
              >
                {"A Grand Modern Home"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jNuPd)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__pOFkh)}>
                  <_14655891761535698998SvgIcon
                    className={classNames(projectcss.all, sty.svg__fLhvv)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pdsfe)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hMKhE
                    )}
                  >
                    {"Location address  121 sqaure"}
                  </div>
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__bQ0Ha)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Fl9G
                  )}
                >
                  {"from $ 24,00"}
                </div>
              </div>
            </React.Fragment>
          ),

          value: args.slot
        })}
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListingListBox__ArgProps,
          internalVariantPropNames: PlasmicListingListBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicListingListBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListingListBox";
  } else {
    func.displayName = `PlasmicListingListBox.${nodeName}`;
  }
  return func;
}

export const PlasmicListingListBox = Object.assign(
  // Top-level PlasmicListingListBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicListingListBox
    internalVariantProps: PlasmicListingListBox__VariantProps,
    internalArgProps: PlasmicListingListBox__ArgProps
  }
);

export default PlasmicListingListBox;
/* prettier-ignore-end */
