// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cqk25K8CLoCEb3zRi62xhx
// Component: qymFIo8cfY4M
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: cqk25K8CLoCEb3zRi62xhx/projectcss
import sty from "./PlasmicNaberhood.module.css"; // plasmic-import: qymFIo8cfY4M/css
import _14655891761535698998SvgIcon from "./icons/PlasmicIcon___14655891761535698998Svg"; // plasmic-import: YBAm9F_DuZLz/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: SQqlqlFAdxvf/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GvR_m76KYdCJ/icon
import house13533891280JpgQy9Zh9Ut4YJi from "./images/house13533891280Jpg.jpg"; // plasmic-import: qy9zh9UT4yJi/picture

createPlasmicElementProxy;

export const PlasmicNaberhood__VariantProps = new Array();

export const PlasmicNaberhood__ArgProps = new Array("children", "slot");

const $$ = {};

function PlasmicNaberhood__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___8VsN0)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: house13533891280JpgQy9Zh9Ut4YJi,
              fullWidth: 1280,
              fullHeight: 853,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.children
      })}
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__huHEy
                )}
              >
                {"Location that you are visted"}
              </h4>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ckClw)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__srXi8)}>
                  <_14655891761535698998SvgIcon
                    className={classNames(projectcss.all, sty.svg__mXy17)}
                    role={"img"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jHahh)}>
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__yhcUg)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fkUmA)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Z16L
                    )}
                  >
                    {"Location address  121 sqaure"}
                  </div>
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox___8XqOd)}>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__l6Zsw
                  )}
                  platform={"react"}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__n1Ktu)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__khVaY
                    )}
                  >
                    {"Read More"}
                  </div>
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__k68Ok)}
                    role={"img"}
                  />
                </Stack__>
              </div>
            </React.Fragment>
          ),

          value: args.slot
        })}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNaberhood__ArgProps,
          internalVariantPropNames: PlasmicNaberhood__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNaberhood__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNaberhood";
  } else {
    func.displayName = `PlasmicNaberhood.${nodeName}`;
  }
  return func;
}

export const PlasmicNaberhood = Object.assign(
  // Top-level PlasmicNaberhood renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicNaberhood
    internalVariantProps: PlasmicNaberhood__VariantProps,
    internalArgProps: PlasmicNaberhood__ArgProps
  }
);

export default PlasmicNaberhood;
/* prettier-ignore-end */
